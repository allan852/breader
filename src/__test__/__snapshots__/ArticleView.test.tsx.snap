// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ArticleView Testing snapshot testing 1`] = `
<injectIntl(ArticleViewComponent)
  articles={
    Immutable.List [
      Object {
        "_id": "tag:www.ruanyifeng.com,2019:/blog//1.2100",
        "_rev": "5-ff6fc450616071a8f7d022b7532e85aa",
        "author": "ruanyifeng",
        "categories": Array [],
        "comments": "article comments",
        "createTime": 1563697765000,
        "deleteTime": 0,
        "description": "article description",
        "enclosures": Array [],
        "feedId": "http://www.ruanyifeng.com/blog/atom.xml",
        "image": "",
        "isDayFirst": true,
        "isStarred": false,
        "isUnread": false,
        "link": "http://www.ruanyifeng.com/blog/2019/07/weekly-issue-65.html",
        "originLink": "",
        "publishTime": 1563697765000,
        "summary": "article summary",
        "time": 1563697765000,
        "title": "article title",
      },
    ]
  }
  asyncStarArticle={[MockFunction]}
  currentArticle={
    Object {
      "_id": "tag:www.ruanyifeng.com,2019:/blog//1.2100",
      "_rev": "5-ff6fc450616071a8f7d022b7532e85aa",
      "author": "ruanyifeng",
      "categories": Array [],
      "comments": "article comments",
      "createTime": 1563697765000,
      "deleteTime": 0,
      "description": "article description",
      "enclosures": Array [],
      "feedId": "http://www.ruanyifeng.com/blog/atom.xml",
      "image": "",
      "isDayFirst": true,
      "isStarred": false,
      "isUnread": false,
      "link": "http://www.ruanyifeng.com/blog/2019/07/weekly-issue-65.html",
      "originLink": "",
      "publishTime": 1563697765000,
      "summary": "article summary",
      "time": 1563697765000,
      "title": "article title",
    }
  }
  feedsMap={
    Immutable.Map {
      "http://www.ruanyifeng.com/blog/atom.xml": Object {
        "_id": "http://www.ruanyifeng.com/blog/atom.xml",
        "_rev": "5-55772bf2b4d4b74608a60ac3480334e4",
        "author": "ruanyifeng",
        "categories": Array [],
        "createTime": 1563686468437,
        "deleteTime": 0,
        "description": "Ruan YiFeng's Blog",
        "etag": "\\"11d86-58e2cc1eab031\\"",
        "favicon": "http://www.ruanyifeng.com/favicon.ico",
        "generator": "Movable Type 5.2.2 (http://www.sixapart.com/movabletype/)",
        "language": "",
        "link": "http://www.ruanyifeng.com/blog/",
        "publishTime": 1563697765000,
        "time": 1563697765000,
        "title": "阮一峰的网络日志",
        "url": "http://www.ruanyifeng.com/blog/atom.xml",
      },
    }
  }
  isUpdatingCurrentArticle={false}
>
  <ArticleViewComponent
    articles={
      Immutable.List [
        Object {
          "_id": "tag:www.ruanyifeng.com,2019:/blog//1.2100",
          "_rev": "5-ff6fc450616071a8f7d022b7532e85aa",
          "author": "ruanyifeng",
          "categories": Array [],
          "comments": "article comments",
          "createTime": 1563697765000,
          "deleteTime": 0,
          "description": "article description",
          "enclosures": Array [],
          "feedId": "http://www.ruanyifeng.com/blog/atom.xml",
          "image": "",
          "isDayFirst": true,
          "isStarred": false,
          "isUnread": false,
          "link": "http://www.ruanyifeng.com/blog/2019/07/weekly-issue-65.html",
          "originLink": "",
          "publishTime": 1563697765000,
          "summary": "article summary",
          "time": 1563697765000,
          "title": "article title",
        },
      ]
    }
    asyncStarArticle={[MockFunction]}
    currentArticle={
      Object {
        "_id": "tag:www.ruanyifeng.com,2019:/blog//1.2100",
        "_rev": "5-ff6fc450616071a8f7d022b7532e85aa",
        "author": "ruanyifeng",
        "categories": Array [],
        "comments": "article comments",
        "createTime": 1563697765000,
        "deleteTime": 0,
        "description": "article description",
        "enclosures": Array [],
        "feedId": "http://www.ruanyifeng.com/blog/atom.xml",
        "image": "",
        "isDayFirst": true,
        "isStarred": false,
        "isUnread": false,
        "link": "http://www.ruanyifeng.com/blog/2019/07/weekly-issue-65.html",
        "originLink": "",
        "publishTime": 1563697765000,
        "summary": "article summary",
        "time": 1563697765000,
        "title": "article title",
      }
    }
    feedsMap={
      Immutable.Map {
        "http://www.ruanyifeng.com/blog/atom.xml": Object {
          "_id": "http://www.ruanyifeng.com/blog/atom.xml",
          "_rev": "5-55772bf2b4d4b74608a60ac3480334e4",
          "author": "ruanyifeng",
          "categories": Array [],
          "createTime": 1563686468437,
          "deleteTime": 0,
          "description": "Ruan YiFeng's Blog",
          "etag": "\\"11d86-58e2cc1eab031\\"",
          "favicon": "http://www.ruanyifeng.com/favicon.ico",
          "generator": "Movable Type 5.2.2 (http://www.sixapart.com/movabletype/)",
          "language": "",
          "link": "http://www.ruanyifeng.com/blog/",
          "publishTime": 1563697765000,
          "time": 1563697765000,
          "title": "阮一峰的网络日志",
          "url": "http://www.ruanyifeng.com/blog/atom.xml",
        },
      }
    }
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en-US",
        "formatDate": [Function],
        "formatDateToParts": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en-US",
        "messages": Object {
          "addFeed": "Add Feed",
          "allArticlesAreReadNow": "All articles are read now.",
          "delete": "Delete",
          "doYouWantSetAllArticlesBeRead": "Do you want set all articles be read?",
          "feedUrl": "Feed Url",
          "feeds": "Feeds",
          "feedsAreUpdated": "Feeds are Updated",
          "inputKeywords": "Please input the keywords",
          "invalidFeedUrl": "Invalid Feed Url",
          "keywords": "Keywords",
          "languages": "Languages",
          "menuAllItems": "All Items",
          "menuStarred": "Starred",
          "menuSubscriptions": "Subscriptions",
          "menuUnread": "Unread",
          "noFeeds": "No Feeds",
          "noMatched": "No Matched",
          "settings": "Settings",
          "somethingWrong": "Something Wrong!",
          "title": "Breader",
          "unfoundFeed": "Unfound Feed",
          "unknown": "Unknown",
        },
        "onError": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
      }
    }
    isUpdatingCurrentArticle={false}
  >
    <div
      className="article-view"
    >
      <div
        className="view-header"
      >
        <div
          className="view-header-right"
        >
          <Icon
            onClick={[Function]}
            theme="outlined"
            type="star"
          >
            <LocaleReceiver
              componentName="Icon"
            >
              <i
                aria-label="icon: star"
                className="anticon anticon-star"
                onClick={[Function]}
                tabIndex={-1}
              >
                <IconReact
                  className=""
                  type="star-o"
                >
                  <svg
                    aria-hidden="true"
                    className=""
                    data-icon="star"
                    fill="currentColor"
                    focusable="false"
                    height="1em"
                    key="svg-star"
                    viewBox="64 64 896 896"
                    width="1em"
                  >
                    <path
                      d="M908.1 353.1l-253.9-36.9L540.7 86.1c-3.1-6.3-8.2-11.4-14.5-14.5-15.8-7.8-35-1.3-42.9 14.5L369.8 316.2l-253.9 36.9c-7 1-13.4 4.3-18.3 9.3a32.05 32.05 0 0 0 .6 45.3l183.7 179.1-43.4 252.9a31.95 31.95 0 0 0 46.4 33.7L512 754l227.1 119.4c6.2 3.3 13.4 4.4 20.3 3.2 17.4-3 29.1-19.5 26.1-36.9l-43.4-252.9 183.7-179.1c5-4.9 8.3-11.3 9.3-18.3 2.7-17.5-9.5-33.7-27-36.3zM664.8 561.6l36.1 210.3L512 672.7 323.1 772l36.1-210.3-152.8-149L417.6 382 512 190.7 606.4 382l211.2 30.7-152.8 148.9z"
                      key="svg-star-svg-0"
                    />
                  </svg>
                </IconReact>
              </i>
            </LocaleReceiver>
          </Icon>
        </div>
      </div>
      <Scrollbars
        autoHeight={false}
        autoHeightMax={200}
        autoHeightMin={0}
        autoHide={false}
        autoHideDuration={200}
        autoHideTimeout={1000}
        hideTracksWhenNotNeeded={false}
        renderThumbHorizontal={[Function]}
        renderThumbVertical={[Function]}
        renderTrackHorizontal={[Function]}
        renderTrackVertical={[Function]}
        renderView={[Function]}
        tagName="div"
        thumbMinSize={30}
        universal={false}
      >
        <div
          style={
            Object {
              "height": "100%",
              "overflow": "hidden",
              "position": "relative",
              "width": "100%",
            }
          }
        >
          <div
            key="view"
            style={
              Object {
                "WebkitOverflowScrolling": "touch",
                "bottom": 0,
                "left": 0,
                "marginBottom": 0,
                "marginRight": 0,
                "overflow": "scroll",
                "position": "absolute",
                "right": 0,
                "top": 0,
              }
            }
          >
            <div
              className="view-content"
              onClick={[Function]}
              onMouseLeave={[Function]}
              onMouseOver={[Function]}
            >
              <div
                className="article-info"
                data-link="http://www.ruanyifeng.com/blog/2019/07/weekly-issue-65.html"
              >
                <div
                  className="article-date"
                >
                  <p>
                    Sun Jul 21 2019 16:29
                  </p>
                </div>
                <div
                  className="article-title"
                >
                  <h1>
                    article title
                  </h1>
                </div>
                <div
                  className="article-author"
                >
                  <p>
                    ruanyifeng
                     @
                     
                    阮一峰的网络日志
                  </p>
                </div>
              </div>
              <div
                className="article-content real-content"
              />
            </div>
          </div>
          <div
            key="trackHorizontal"
            style={
              Object {
                "borderRadius": 3,
                "bottom": 2,
                "display": "none",
                "height": 6,
                "left": 2,
                "position": "absolute",
                "right": 2,
              }
            }
          >
            <div
              style={
                Object {
                  "backgroundColor": "rgba(0,0,0,.2)",
                  "borderRadius": "inherit",
                  "cursor": "pointer",
                  "display": "block",
                  "height": "100%",
                  "position": "relative",
                }
              }
            />
          </div>
          <div
            key="trackVertical"
            style={
              Object {
                "borderRadius": 3,
                "bottom": 2,
                "display": "none",
                "position": "absolute",
                "right": 2,
                "top": 2,
                "width": 6,
              }
            }
          >
            <div
              style={
                Object {
                  "backgroundColor": "rgba(0,0,0,.2)",
                  "borderRadius": "inherit",
                  "cursor": "pointer",
                  "display": "block",
                  "position": "relative",
                  "width": "100%",
                }
              }
            />
          </div>
        </div>
      </Scrollbars>
      <div
        className="view-footer"
      >
        <p />
      </div>
      <WebviewDrawer
        onClose={[Function]}
        src=""
        visible={false}
        width="calc(100vw - 490px)"
      >
        <withConfigConsumer(Drawer)
          className="webview-drawer"
          closable={false}
          onClose={[Function]}
          visible={false}
          width="calc(100vw - 490px)"
        >
          <Drawer
            className="webview-drawer"
            closable={false}
            getPrefixCls={[Function]}
            height={256}
            keyboard={true}
            level={null}
            mask={true}
            maskClosable={true}
            onClose={[Function]}
            placement="right"
            prefixCls="ant-drawer"
            renderEmpty={[Function]}
            visible={false}
            width="calc(100vw - 490px)"
          >
            <DrawerWrapper
              afterVisibleChange={[Function]}
              className="webview-drawer"
              defaultOpen={false}
              duration=".3s"
              ease="cubic-bezier(0.78, 0.14, 0.15, 0.86)"
              forceRender={false}
              getContainer="body"
              handler={false}
              keyboard={true}
              level={null}
              maskClosable={true}
              maskStyle={Object {}}
              onChange={[Function]}
              onClose={[Function]}
              open={false}
              placement="right"
              prefixCls="ant-drawer"
              showMask={true}
              style={
                Object {
                  "transform": undefined,
                  "zIndex": undefined,
                }
              }
              width="calc(100vw - 490px)"
              wrapperClassName=""
            >
              <PortalWrapper
                forceRender={false}
                getContainer="body"
                visible={false}
                wrapperClassName=""
              />
            </DrawerWrapper>
          </Drawer>
        </withConfigConsumer(Drawer)>
      </WebviewDrawer>
      <ArticleViewSkeleton
        style={
          Object {
            "display": "none",
          }
        }
      >
        <div
          className="article-view-skeleton "
          style={
            Object {
              "display": "none",
            }
          }
        >
          <div
            className="view-content"
          >
            <div
              className="article-info"
            >
              <div
                className="article-date"
              >
                <SpanSkeleton
                  width={138}
                >
                  <span
                    className="span-skeleton skeleton-active "
                    style={
                      Object {
                        "width": 138,
                      }
                    }
                  />
                </SpanSkeleton>
              </div>
              <div
                className="article-title"
              >
                <TextSkeleton
                  style={
                    Object {
                      "height": 40,
                      "marginBottom": 8,
                    }
                  }
                >
                  <div
                    className="text-skeleton skeleton-active "
                    style={
                      Object {
                        "height": 40,
                        "marginBottom": 8,
                        "width": undefined,
                      }
                    }
                  />
                </TextSkeleton>
              </div>
              <div
                className="article-author"
              >
                <SpanSkeleton
                  width={156}
                >
                  <span
                    className="span-skeleton skeleton-active "
                    style={
                      Object {
                        "width": 156,
                      }
                    }
                  />
                </SpanSkeleton>
              </div>
            </div>
            <div
              className="article-content"
            >
              <TextSkeleton>
                <div
                  className="text-skeleton skeleton-active "
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                />
              </TextSkeleton>
              <TextSkeleton>
                <div
                  className="text-skeleton skeleton-active "
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                />
              </TextSkeleton>
              <TextSkeleton
                width="57%"
              >
                <div
                  className="text-skeleton skeleton-active "
                  style={
                    Object {
                      "width": "57%",
                    }
                  }
                />
              </TextSkeleton>
              <br />
              <TextSkeleton>
                <div
                  className="text-skeleton skeleton-active "
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                />
              </TextSkeleton>
              <TextSkeleton>
                <div
                  className="text-skeleton skeleton-active "
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                />
              </TextSkeleton>
              <TextSkeleton>
                <div
                  className="text-skeleton skeleton-active "
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                />
              </TextSkeleton>
              <TextSkeleton>
                <div
                  className="text-skeleton skeleton-active "
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                />
              </TextSkeleton>
              <TextSkeleton
                width="83%"
              >
                <div
                  className="text-skeleton skeleton-active "
                  style={
                    Object {
                      "width": "83%",
                    }
                  }
                />
              </TextSkeleton>
              <br />
              <TextSkeleton>
                <div
                  className="text-skeleton skeleton-active "
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                />
              </TextSkeleton>
              <TextSkeleton>
                <div
                  className="text-skeleton skeleton-active "
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                />
              </TextSkeleton>
              <TextSkeleton>
                <div
                  className="text-skeleton skeleton-active "
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                />
              </TextSkeleton>
              <TextSkeleton>
                <div
                  className="text-skeleton skeleton-active "
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                />
              </TextSkeleton>
              <TextSkeleton>
                <div
                  className="text-skeleton skeleton-active "
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                />
              </TextSkeleton>
              <TextSkeleton
                width="67%"
              >
                <div
                  className="text-skeleton skeleton-active "
                  style={
                    Object {
                      "width": "67%",
                    }
                  }
                />
              </TextSkeleton>
            </div>
          </div>
        </div>
      </ArticleViewSkeleton>
    </div>
  </ArticleViewComponent>
</injectIntl(ArticleViewComponent)>
`;
