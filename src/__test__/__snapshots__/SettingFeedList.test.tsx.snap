// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SettingFeedList Testing snapshot testing 1`] = `
<IntlProvider
  defaultFormats={Object {}}
  defaultLocale="en"
  formats={Object {}}
  locale="en-US"
  messages={
    Object {
      "addFeed": "Add Feed",
      "allArticlesAreReadNow": "All articles are read now.",
      "delete": "Delete",
      "doYouWantSetAllArticlesBeRead": "Do you want set all articles be read?",
      "feedUrl": "Feed Url",
      "feeds": "Feeds",
      "feedsAreUpdated": "Feeds are Updated",
      "inputKeywords": "Please input the keywords",
      "invalidFeedUrl": "Invalid Feed Url",
      "keywords": "Keywords",
      "languages": "Languages",
      "menuAllItems": "All Items",
      "menuStarred": "Starred",
      "menuSubscriptions": "Subscriptions",
      "menuUnread": "Unread",
      "noFeeds": "No Feeds",
      "noMatched": "No Matched",
      "settings": "Settings",
      "somethingWrong": "Something Wrong!",
      "title": "Breader",
      "unfoundFeed": "Unfound Feed",
      "unknown": "Unknown",
    }
  }
  onError={[Function]}
  textComponent={Symbol(react.fragment)}
>
  <injectIntl(SettingFeedListComponent)
    feeds={
      Array [
        Object {
          "_id": "http://www.ruanyifeng.com/blog/atom.xml",
          "_rev": "5-55772bf2b4d4b74608a60ac3480334e4",
          "author": "ruanyifeng",
          "categories": Array [],
          "createTime": 1563686468437,
          "deleteTime": 0,
          "description": "Ruan YiFeng's Blog",
          "etag": "\\"11d86-58e2cc1eab031\\"",
          "favicon": "http://www.ruanyifeng.com/favicon.ico",
          "generator": "Movable Type 5.2.2 (http://www.sixapart.com/movabletype/)",
          "language": "",
          "link": "http://www.ruanyifeng.com/blog/",
          "publishTime": 1563697765000,
          "time": 1563697765000,
          "title": "阮一峰的网络日志",
          "url": "http://www.ruanyifeng.com/blog/atom.xml",
        },
      ]
    }
    onDeleteFeed={
      [MockFunction] {
        "calls": Array [
          Array [
            "http://www.ruanyifeng.com/blog/atom.xml",
            0,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
  >
    <SettingFeedListComponent
      feeds={
        Array [
          Object {
            "_id": "http://www.ruanyifeng.com/blog/atom.xml",
            "_rev": "5-55772bf2b4d4b74608a60ac3480334e4",
            "author": "ruanyifeng",
            "categories": Array [],
            "createTime": 1563686468437,
            "deleteTime": 0,
            "description": "Ruan YiFeng's Blog",
            "etag": "\\"11d86-58e2cc1eab031\\"",
            "favicon": "http://www.ruanyifeng.com/favicon.ico",
            "generator": "Movable Type 5.2.2 (http://www.sixapart.com/movabletype/)",
            "language": "",
            "link": "http://www.ruanyifeng.com/blog/",
            "publishTime": 1563697765000,
            "time": 1563697765000,
            "title": "阮一峰的网络日志",
            "url": "http://www.ruanyifeng.com/blog/atom.xml",
          },
        ]
      }
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatDateToParts": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatNumberToParts": [Function],
          "formatPlural": [Function],
          "formatRelativeTime": [Function],
          "formatTime": [Function],
          "formatTimeToParts": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralRules": [Function],
            "getRelativeTimeFormat": [Function],
          },
          "locale": "en-US",
          "messages": Object {
            "addFeed": "Add Feed",
            "allArticlesAreReadNow": "All articles are read now.",
            "delete": "Delete",
            "doYouWantSetAllArticlesBeRead": "Do you want set all articles be read?",
            "feedUrl": "Feed Url",
            "feeds": "Feeds",
            "feedsAreUpdated": "Feeds are Updated",
            "inputKeywords": "Please input the keywords",
            "invalidFeedUrl": "Invalid Feed Url",
            "keywords": "Keywords",
            "languages": "Languages",
            "menuAllItems": "All Items",
            "menuStarred": "Starred",
            "menuSubscriptions": "Subscriptions",
            "menuUnread": "Unread",
            "noFeeds": "No Feeds",
            "noMatched": "No Matched",
            "settings": "Settings",
            "somethingWrong": "Something Wrong!",
            "title": "Breader",
            "unfoundFeed": "Unfound Feed",
            "unknown": "Unknown",
          },
          "onError": [Function],
          "textComponent": Symbol(react.fragment),
          "timeZone": undefined,
        }
      }
      onDeleteFeed={
        [MockFunction] {
          "calls": Array [
            Array [
              "http://www.ruanyifeng.com/blog/atom.xml",
              0,
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
    >
      <div
        className="ant-list ant-list-sm ant-list-split ant-list-bordered setting-feed-list"
      >
        <Scrollbars
          autoHeight={true}
          autoHeightMax="calc(100vh - 332px)"
          autoHeightMin={0}
          autoHide={true}
          autoHideDuration={200}
          autoHideTimeout={1000}
          hideTracksWhenNotNeeded={false}
          onScrollStart={[Function]}
          renderThumbHorizontal={[Function]}
          renderThumbVertical={[Function]}
          renderTrackHorizontal={[Function]}
          renderTrackVertical={[Function]}
          renderView={[Function]}
          tagName="div"
          thumbMinSize={30}
          universal={false}
        >
          <div
            style={
              Object {
                "height": "auto",
                "maxHeight": "calc(100vh - 332px)",
                "minHeight": 0,
                "overflow": "hidden",
                "position": "relative",
                "width": "100%",
              }
            }
          >
            <div
              key="view"
              style={
                Object {
                  "WebkitOverflowScrolling": "touch",
                  "bottom": undefined,
                  "left": undefined,
                  "marginBottom": 0,
                  "marginRight": 0,
                  "maxHeight": "calc(calc(100vh - 332px) + 0px)",
                  "minHeight": 0,
                  "overflow": "scroll",
                  "position": "relative",
                  "right": undefined,
                  "top": undefined,
                }
              }
            >
              <ul
                className="ant-list-items setting-feed-items"
              >
                <Item
                  actions={
                    Array [
                      <Button
                        block={false}
                        ghost={false}
                        htmlType="button"
                        loading={false}
                        onClick={[Function]}
                        size="small"
                        type="danger"
                      >
                        <FormattedMessage
                          id="delete"
                          values={Object {}}
                        />
                      </Button>,
                    ]
                  }
                  className="setting-feed-item"
                  key="http://www.ruanyifeng.com/blog/atom.xml"
                >
                  <li
                    className="ant-list-item setting-feed-item"
                  >
                    <p
                      className="feed-item-content"
                      title="http://www.ruanyifeng.com/blog/atom.xml"
                    >
                      <Avatar
                        shape="square"
                        size={16}
                        src="http://www.ruanyifeng.com/favicon.ico"
                      >
                        <span
                          className="ant-avatar ant-avatar-square ant-avatar-image"
                          style={
                            Object {
                              "fontSize": 18,
                              "height": 16,
                              "lineHeight": "16px",
                              "width": 16,
                            }
                          }
                        >
                          <img
                            onError={[Function]}
                            src="http://www.ruanyifeng.com/favicon.ico"
                          />
                        </span>
                      </Avatar>
                       
                      阮一峰的网络日志
                    </p>
                    <ul
                      className="ant-list-item-action"
                      key="actions"
                    >
                      <li
                        key="ant-list-item-action-0"
                      >
                        <Button
                          block={false}
                          ghost={false}
                          htmlType="button"
                          key="http://www.ruanyifeng.com/blog/atom.xml"
                          loading={false}
                          onClick={[Function]}
                          size="small"
                          type="danger"
                        >
                          <Wave>
                            <button
                              className="ant-btn ant-btn-danger ant-btn-sm"
                              onClick={[Function]}
                              type="button"
                            >
                              <FormattedMessage
                                id="delete"
                                key=".0"
                                values={Object {}}
                              >
                                Delete
                              </FormattedMessage>
                            </button>
                          </Wave>
                        </Button>
                      </li>
                    </ul>
                  </li>
                </Item>
              </ul>
            </div>
            <div
              key="trackHorizontal"
              style={
                Object {
                  "borderRadius": 3,
                  "bottom": 2,
                  "display": "none",
                  "height": 6,
                  "left": 2,
                  "opacity": 0,
                  "position": "absolute",
                  "right": 2,
                  "transition": "opacity 200ms",
                }
              }
            >
              <div
                style={
                  Object {
                    "backgroundColor": "rgba(0,0,0,.2)",
                    "borderRadius": "inherit",
                    "cursor": "pointer",
                    "display": "block",
                    "height": "100%",
                    "position": "relative",
                  }
                }
              />
            </div>
            <div
              key="trackVertical"
              style={
                Object {
                  "borderRadius": 3,
                  "bottom": 2,
                  "display": "none",
                  "opacity": 0,
                  "position": "absolute",
                  "right": 2,
                  "top": 2,
                  "transition": "opacity 200ms",
                  "width": 6,
                }
              }
            >
              <div
                style={
                  Object {
                    "backgroundColor": "rgba(0,0,0,.2)",
                    "borderRadius": "inherit",
                    "cursor": "pointer",
                    "display": "block",
                    "position": "relative",
                    "width": "100%",
                  }
                }
              />
            </div>
          </div>
        </Scrollbars>
      </div>
    </SettingFeedListComponent>
  </injectIntl(SettingFeedListComponent)>
</IntlProvider>
`;
